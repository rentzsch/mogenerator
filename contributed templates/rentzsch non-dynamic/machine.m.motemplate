// DO NOT EDIT. This file is machine-generated and constantly overwritten.
// Make changes to <$managedObjectClassName$>.m instead.

#import "_<$managedObjectClassName$>.h"

@implementation <$managedObjectClassName$>ID
@end

@implementation _<$managedObjectClassName$>

+ (id)insertInManagedObjectContext:(NSManagedObjectContext*)moc_ {
	return [NSEntityDescription insertNewObjectForEntityForName:@"<$name$>" inManagedObjectContext:moc_];									 
}

- (<$managedObjectClassName$>ID*)objectID {
	return (<$managedObjectClassName$>ID*)[super objectID];
}

<$foreach Attribute noninheritedAttributes do$>
<$if Attribute.hasDefinedAttributeType$>

- (<$Attribute.objectAttributeType$>*)<$Attribute.name$> {
	[self willAccessValueForKey:@"<$Attribute.name$>"];
	<$Attribute.objectAttributeType$> *result = [self primitiveValueForKey:@"<$Attribute.name$>"];
	[self didAccessValueForKey:@"<$Attribute.name$>"];
	return result;
}

- (void)set<$Attribute.name.initialCapitalString$>:(<$Attribute.objectAttributeType$>*)value_ {
	[self willChangeValueForKey:@"<$Attribute.name$>"];
	[self setPrimitiveValue:value_ forKey:@"<$Attribute.name$>"];
	[self didChangeValueForKey:@"<$Attribute.name$>"];
}

<$if Attribute.hasScalarAttributeType$>

- (<$Attribute.scalarAttributeType$>)<$Attribute.name$>Value {
	NSNumber *result = [self <$Attribute.name$>];
	return result ? [result <$Attribute.scalarAttributeType.camelCaseString$>Value] : 0;
}

- (void)set<$Attribute.name.initialCapitalString$>Value:(<$Attribute.scalarAttributeType$>)value_ {
	[self set<$Attribute.name.initialCapitalString$>:[NSNumber numberWith<$Attribute.scalarAttributeType.camelCaseString.initialCapitalString$>:value_]];
}

<$endif$>
<$endif$>
<$endforeach do$>

<$foreach Relationship noninheritedRelationships do$>
	<$if Relationship.isToMany$>

- (NSSet*)<$Relationship.name$> {
	[self willAccessValueForKey:@"<$Relationship.name$>"];
	NSSet *result = [self primitiveValueForKey:@"<$Relationship.name$>"];
	[self didAccessValueForKey:@"<$Relationship.name$>"];
	return result;
}

- (void)set<$Relationship.name.initialCapitalString$>:(NSSet*)value_ {
	[self willChangeValueForKey:@"<$Relationship.name$>" withSetMutation:NSKeyValueSetSetMutation usingObjects:value_];
	[[self primitiveValueForKey:@"<$Relationship.name$>"] setSet:value_];
	[self didChangeValueForKey:@"<$Relationship.name$>" withSetMutation:NSKeyValueSetSetMutation usingObjects:value_];
}

- (void)add<$Relationship.name.initialCapitalString$>:(NSSet*)value_ {
	[self willChangeValueForKey:@"<$Relationship.name$>" withSetMutation:NSKeyValueUnionSetMutation usingObjects:value_];
	[[self primitiveValueForKey:@"<$Relationship.name$>"] unionSet:value_];
	[self didChangeValueForKey:@"<$Relationship.name$>" withSetMutation:NSKeyValueUnionSetMutation usingObjects:value_];
}

-(void)remove<$Relationship.name.initialCapitalString$>:(NSSet*)value_ {
	[self willChangeValueForKey:@"<$Relationship.name$>" withSetMutation:NSKeyValueMinusSetMutation usingObjects:value_];
	[[self primitiveValueForKey:@"<$Relationship.name$>"] minusSet:value_];
	[self didChangeValueForKey:@"<$Relationship.name$>" withSetMutation:NSKeyValueMinusSetMutation usingObjects:value_];
}
	
- (void)add<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_ {
	NSSet *changedObjects = [[NSSet alloc] initWithObjects:&value_ count:1];
	[self willChangeValueForKey:@"<$Relationship.name$>" withSetMutation:NSKeyValueUnionSetMutation usingObjects:changedObjects];
	[[self primitiveValueForKey:@"<$Relationship.name$>"] addObject:value_];
	[self didChangeValueForKey:@"<$Relationship.name$>" withSetMutation:NSKeyValueUnionSetMutation usingObjects:changedObjects];
	[changedObjects release];
}

- (void)remove<$Relationship.name.initialCapitalString$>Object:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_ {
	NSSet *changedObjects = [[NSSet alloc] initWithObjects:&value_ count:1];
	[self willChangeValueForKey:@"<$Relationship.name$>" withSetMutation:NSKeyValueMinusSetMutation usingObjects:changedObjects];
	[[self primitiveValueForKey:@"<$Relationship.name$>"] removeObject:value_];
	[self didChangeValueForKey:@"<$Relationship.name$>" withSetMutation:NSKeyValueMinusSetMutation usingObjects:changedObjects];
	[changedObjects release];
}

- (NSMutableSet*)<$Relationship.name$>Set {
	[self willAccessValueForKey:@"<$Relationship.name$>"];
	NSMutableSet *result = [self mutableSetValueForKey:@"<$Relationship.name$>"];
	[self didAccessValueForKey:@"<$Relationship.name$>"];
	return result;
}
	<$else$>

- (<$Relationship.destinationEntity.managedObjectClassName$>*)<$Relationship.name$> {
	[self willAccessValueForKey:@"<$Relationship.name$>"];
	<$Relationship.destinationEntity.managedObjectClassName$> *result = [self primitiveValueForKey:@"<$Relationship.name$>"];
	[self didAccessValueForKey:@"<$Relationship.name$>"];
	return result;
}

- (void)set<$Relationship.name.initialCapitalString$>:(<$Relationship.destinationEntity.managedObjectClassName$>*)value_ {
	[self willChangeValueForKey:@"<$Relationship.name$>"];
	[self setPrimitiveValue:value_ forKey:@"<$Relationship.name$>"];
	[self didChangeValueForKey:@"<$Relationship.name$>"];
}

	<$endif$>
<$endforeach do$>

<$foreach FetchRequest prettyFetchRequests do$>
<$if FetchRequest.singleResult$>
+ (id)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext*)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_<$endforeach do2$> {
	NSError *error = nil;
	id result = [self fetch<$FetchRequest.name.initialCapitalString$>:moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:<$Binding.name$>_<$endforeach do2$> error:&error];
	if (error) {
		[NSApp presentError:error];
	}
	return result;
}
+ (id)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext*)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_<$endforeach do2$> error:(NSError**)error_ {
	NSError *error = nil;
	
	NSManagedObjectModel *model = [[moc_ persistentStoreCoordinator] managedObjectModel];
	NSDictionary *substitutionVariables = [NSDictionary dictionaryWithObjectsAndKeys:
														<$foreach Binding FetchRequest.bindings do2$>
														<$Binding.name$>_, @"<$Binding.name$>",
														<$endforeach do2$>
														nil];
	NSFetchRequest *fetchRequest = [model fetchRequestFromTemplateWithName:@"<$FetchRequest.name$>"
													 substitutionVariables:substitutionVariables];
	NSAssert(fetchRequest, @"Can't find fetch request named \"<$FetchRequest.name$>\".");
	
	id result = nil;
	NSArray *results = [moc_ executeFetchRequest:fetchRequest error:&error];
	
	if (!error) {
		switch ([results count]) {
			case 0:
				//	Nothing found matching the fetch request. That's cool, though: we'll just return nil.
				break;
			case 1:
				result = [results objectAtIndex:0];
				break;
			default:
				NSLog(@"WARN fetch request <$FetchRequest.name$>: 0 or 1 objects expected, %u found (substitutionVariables:%@, results:%@)",
					[results count],
					substitutionVariables,
					results);
		}
	}
	
	if (error_) *error_ = error;
	return result;
}
<$else$>
+ (NSArray*)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext*)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_<$endforeach do2$> {
	NSError *error = nil;
	NSArray *result = [self fetch<$FetchRequest.name.initialCapitalString$>:moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:<$Binding.name$>_<$endforeach do2$> error:&error];
	if (error) {
		[NSApp presentError:error];
	}
	return result;
}
+ (NSArray*)fetch<$FetchRequest.name.initialCapitalString$>:(NSManagedObjectContext*)moc_ <$foreach Binding FetchRequest.bindings do2$><$Binding.name$>:(<$Binding.type$>)<$Binding.name$>_<$endforeach do2$> error:(NSError**)error_ {
	NSError *error = nil;
	
	NSManagedObjectModel *model = [[moc_ persistentStoreCoordinator] managedObjectModel];
	NSFetchRequest *fetchRequest = [model fetchRequestFromTemplateWithName:@"<$FetchRequest.name$>"
													 substitutionVariables:[NSDictionary dictionaryWithObjectsAndKeys:
														<$foreach Binding FetchRequest.bindings do2$>
														<$Binding.name$>_, @"<$Binding.name$>",
														<$endforeach do2$>
														nil]
													 ];
	NSAssert(fetchRequest, @"Can't find fetch request named \"<$FetchRequest.name$>\".");
	
	NSArray *result = [moc_ executeFetchRequest:fetchRequest error:&error];
	if (error_) *error_ = error;
	return result;
}
<$endif$>
<$endforeach do$>
@end
