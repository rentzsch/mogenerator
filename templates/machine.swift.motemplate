// DO NOT EDIT. This file is machine-generated and constantly overwritten.
// Make changes to <$managedObjectClassName$>.swift instead.

import CoreData

<$if noninheritedAttributes.@count > 0$>
enum <$derivedManagedObjectClassName$>Attributes: String {<$foreach Attribute noninheritedAttributes do$>
    case <$Attribute.name$> = "<$Attribute.name$>"<$endforeach do$>
}
<$endif$>

<$if noninheritedRelationships.@count > 0$>
enum <$derivedManagedObjectClassName$>Relationships: String {<$foreach Relationship noninheritedRelationships do$>
    case <$Relationship.name$> = "<$Relationship.name$>"<$endforeach do$>
}
<$endif$>

<$if noninheritedFetchedProperties.@count > 0$>
enum <$derivedManagedObjectClassName$>FetchedProperties: String {<$foreach FetchedProperty noninheritedFetchedProperties do$>
    case <$FetchedProperty.name$> = "<$FetchedProperty.name$>"<$endforeach do$>
}
<$endif$>

<$if hasUserInfoKeys$>
enum <$derivedManagedObjectClassName$>UserInfo: String {<$foreach UserInfo userInfoKeyValues do$>
    case <$UserInfo.key$> = "<$UserInfo.key$>"<$endforeach do$>
}
<$endif$>

@objc
public class _<$derivedManagedObjectClassName$>: <$customSuperentity$> {

    // MARK: - Class methods
    
    <$if hasCustomSuperentity$>override <$endif$>public class func entityName () -> String {
        return "<$name$>"
    }

    <$if hasCustomSuperentity$>override <$endif$>public class func entity(managedObjectContext: NSManagedObjectContext!) -> NSEntityDescription! {
        return NSEntityDescription.entityForName(self.entityName(), inManagedObjectContext: managedObjectContext);
    }

    // MARK: - Life cycle methods

    override init(entity: NSEntityDescription!, insertIntoManagedObjectContext context: NSManagedObjectContext!) {
        super.init(entity: entity, insertIntoManagedObjectContext: context)
    }

    convenience init(managedObjectContext: NSManagedObjectContext!) {
        let entity = _<$derivedManagedObjectClassName$>.entity(managedObjectContext)
        self.init(entity: entity, insertIntoManagedObjectContext: managedObjectContext)
    }

    // MARK: - Properties
<$foreach Attribute noninheritedAttributes do$>
<$if Attribute.hasDefinedAttributeType$>
<$if Attribute.hasScalarAttributeType$>
<$if Attribute.isReadonly$>
    @NSManaged
    let <$Attribute.name$>: NSNumber?
<$else$>
    @NSManaged
    public var <$Attribute.name$>: NSNumber?
<$endif$>
<$else$>
<$if Attribute.isReadonly$>
    @NSManaged
    let <$Attribute.name$>: <$Attribute.objectAttributeType$>
<$else$>
    @NSManaged
    public var <$Attribute.name$>: <$Attribute.objectAttributeType$>
<$endif$>
<$endif$>
    // func validate<$Attribute.name.initialCapitalString$>(value: AutoreleasingUnsafePointer<AnyObject>, error: NSErrorPointer) {}
<$endif$>
<$endforeach do$>

    // MARK: - Relationships
<$foreach Relationship noninheritedRelationships do$>
<$if Relationship.isToMany$>
    @NSManaged
    public var <$Relationship.name$>: <$Relationship.immutableCollectionClassName$>

    func <$Relationship.name$>Set() -> <$Relationship.mutableCollectionClassName$>! {
        self.willAccessValueForKey("<$Relationship.name$>")
<$if Relationship.jr_isOrdered$>
        let result = self.mutableOrderedSetValueForKey("<$Relationship.name$>")
<$else$>
        let result = self.mutableSetValueForKey("<$Relationship.name$>")
<$endif$>
        self.didAccessValueForKey("<$Relationship.name$>")
        return result
    }
<$else$>
    @NSManaged
    public var <$Relationship.name$>: <$Relationship.destinationEntity.derivedManagedObjectClassName$>

    // func validate<$Relationship.name.initialCapitalString$>(value: AutoreleasingUnsafePointer<AnyObject>, error: NSErrorPointer) {}
<$endif$>
<$endforeach do$>

<$foreach FetchRequest prettyFetchRequests do$>
<$if FetchRequest.singleResult$>
    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext!<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>) -> AnyObject? {
        return self.fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.name$><$endforeach do2$>, error: nil)
    }

    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext!<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>, error outError: NSErrorPointer) -> AnyObject? {
        let model = managedObjectContext.persistentStoreCoordinator().managedObjectModel()
        let substitutionVariables = [<$if FetchRequest.hasBindings$><$foreach Binding FetchRequest.bindings do2$>
            "<$Binding.name$>": <$Binding.name$>,
<$endforeach do2$><$endif$>        ]

        let fetchRequest = model.fetchRequestFromTemplateWithName("<$FetchRequest.name$>", substitutionVariables: substitutionVariables)
        assert(fetchRequest != nil, "Can't find fetch request named \"<$FetchRequest.name$>\".")

        var error: NSError? = nil
        var result: AnyObject? = nil
        let results = managedObjectContext.executeFetchRequest(fetchRequest, error: &error)

        if error {
            outError.memory = error
        } else {
            switch results.count {
            case 0:
                // Nothing found matching the fetch request. That's cool, though: we'll just return nil.
                break
            case 1:
                result = results[0]
            default:
                NSLog("WARN fetch request <$FetchRequest.name$>: 0 or 1 objects expected, %lu found (substitutionVariables:%@, results:%@)",
                    results.count,
                    substitutionVariables,
                    results);
            }
        }

        return result;
    }
<$else$>
    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext!<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>) -> [AnyObject] {
        return self.fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.name$><$endforeach do2$>, error: nil)
    }

    class func fetch<$FetchRequest.name.initialCapitalString$>(managedObjectContext: NSManagedObjectContext!<$foreach Binding FetchRequest.bindings do2$>, <$Binding.name$>: <$Binding.type$><$endforeach do2$>, error outError: NSErrorPointer) -> [AnyObject] {
        let model = managedObjectContext.persistentStoreCoordinator.managedObjectModel
        let substitutionVariables = [<$if FetchRequest.hasBindings$><$foreach Binding FetchRequest.bindings do2$>
            "<$Binding.name$>": <$Binding.name$>,
<$endforeach do2$><$else$>:<$endif$>]

        let fetchRequest = model.fetchRequestFromTemplateWithName("<$FetchRequest.name$>", substitutionVariables: substitutionVariables)
        assert(fetchRequest != nil, "Can't find fetch request named \"<$FetchRequest.name$>\".")

        var error: NSError? = nil
        let results = managedObjectContext.executeFetchRequest(fetchRequest, error: &error)

        if error {
            outError.memory = error
        }

        return results
    }
<$endif$>
<$endforeach do$>

<$foreach FetchedProperty noninheritedFetchedProperties do$>
    @NSManaged
    let <$FetchedProperty.name$>: [<$FetchedProperty.entity.derivedManagedObjectClassName$>]
<$endforeach do$>
}

<$foreach Relationship noninheritedRelationships do$><$if Relationship.isToMany$>
extension _<$derivedManagedObjectClassName$> {

    func add<$Relationship.name.initialCapitalString$>(objects: <$Relationship.immutableCollectionClassName$>) {
        self.<$Relationship.name$>Set().union<$if Relationship.jr_isOrdered$>Ordered<$endif$>Set(objects)
    }

    func remove<$Relationship.name.initialCapitalString$>(objects: <$Relationship.immutableCollectionClassName$>) {
        self.<$Relationship.name$>Set().minus<$if Relationship.jr_isOrdered$>Ordered<$endif$>Set(objects)
    }

    func add<$Relationship.name.initialCapitalString$>Object(value: <$Relationship.destinationEntity.derivedManagedObjectClassName$>!) {
        self.<$Relationship.name$>Set().addObject(value)
    }

    func remove<$Relationship.name.initialCapitalString$>Object(value: <$Relationship.destinationEntity.derivedManagedObjectClassName$>!) {
        self.<$Relationship.name$>Set().removeObject(value)
    }

}
<$endif$><$endforeach do$>
